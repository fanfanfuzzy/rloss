# Dockerfile optimized for A100 GPU on Ubuntu 22.04
# Based on PyTorch 2.5.1 with CUDA 11.8 for A100 compatibility

ARG CUDA_VERSION=11.8
ARG PYTORCH_VERSION=2.5.1
ARG UBUNTU_VERSION=22.04

# Use PyTorch official image with CUDA 11.8 for A100 support
FROM pytorch/pytorch:${PYTORCH_VERSION}-cuda${CUDA_VERSION}-cudnn9-devel

# Set environment variables for A100 optimization
ENV CUDA_VISIBLE_DEVICES=0
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies optimized for Ubuntu 22.04
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    wget \
    curl \
    vim \
    nano \
    htop \
    tmux \
    swig \
    libomp-dev \
    libopencv-dev \
    python3-opencv \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    libgtk-3-dev \
    libatlas-base-dev \
    gfortran \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies optimized for A100
COPY requirements.txt /tmp/requirements.txt
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r /tmp/requirements.txt

# Install additional packages for A100 optimization
RUN pip install --no-cache-dir \
    jupyter \
    jupyterlab \
    tensorboard \
    wandb \
    opencv-python \
    scikit-image \
    albumentations \
    timm \
    segmentation-models-pytorch \
    pytorch-lightning \
    torchmetrics

# Set working directory
WORKDIR /workspace

# Copy source code
COPY . /workspace/

# Build bilateral filtering extension with A100 optimizations
WORKDIR /workspace/wrapper/bilateralfilter
RUN swig -python -c++ bilateralfilter.i && \
    python setup.py build_ext --inplace && \
    python setup.py install

# Create necessary directories
RUN mkdir -p /data/datasets && \
    mkdir -p /workspace/results && \
    mkdir -p /workspace/logs

# Set up environment for A100
ENV TORCH_CUDA_ARCH_LIST="8.0"
ENV FORCE_CUDA="1"
ENV CUDA_HOME="/usr/local/cuda"
ENV PATH="${CUDA_HOME}/bin:${PATH}"
ENV LD_LIBRARY_PATH="${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}"

# Optimize for A100 memory and compute
ENV PYTORCH_CUDA_ALLOC_CONF="max_split_size_mb:512"
ENV CUDA_LAUNCH_BLOCKING=0
ENV TORCH_USE_CUDA_DSA=1

# Return to main directory
WORKDIR /workspace

# Create startup script
COPY <<EOF /usr/local/bin/entrypoint.sh
#!/bin/bash
echo "=== rloss Environment for A100 + Ubuntu 22.04 ==="
echo "PyTorch version: \$(python -c 'import torch; print(torch.__version__)')"
echo "CUDA available: \$(python -c 'import torch; print(torch.cuda.is_available())')"
if python -c "import torch; print(torch.cuda.is_available())" | grep -q True; then
    echo "GPU: \$(python -c 'import torch; print(torch.cuda.get_device_name(0) if torch.cuda.is_available() else "No GPU")')"
    echo "CUDA version: \$(python -c 'import torch; print(torch.version.cuda)')"
    echo "GPU memory: \$(python -c 'import torch; print(f"{torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB" if torch.cuda.is_available() else "N/A")')"
fi
echo ""
echo "Available commands:"
echo "  python test_environment.py  - Test environment setup"
echo "  cd pytorch-deeplab_v3_plus  - Enter main directory"
echo "  jupyter lab --ip=0.0.0.0 --allow-root  - Start Jupyter Lab"
echo ""
exec "\$@"
EOF

RUN chmod +x /usr/local/bin/entrypoint.sh

# Set entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["/bin/bash"]

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import torch; assert torch.cuda.is_available()" || exit 1

# Labels for metadata
LABEL maintainer="rloss-team"
LABEL version="1.0"
LABEL description="rloss framework optimized for A100 GPU on Ubuntu 22.04"
LABEL cuda.version="${CUDA_VERSION}"
LABEL pytorch.version="${PYTORCH_VERSION}"
LABEL ubuntu.version="${UBUNTU_VERSION}"
